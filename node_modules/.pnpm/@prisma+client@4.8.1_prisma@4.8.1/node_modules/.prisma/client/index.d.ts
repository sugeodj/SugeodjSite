
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model ContentMeta
 * 
 */
export type ContentMeta = {
  id: string
  type: ContentType
  title: string
  slug: string
  createdAt: Date
}

/**
 * Model View
 * 
 */
export type View = {
  id: string
  createdAt: Date
  sessionId: string
  contentId: string
}

/**
 * Model Share
 * 
 */
export type Share = {
  id: string
  type: ShareType | null
  createdAt: Date
  sessionId: string
  contentId: string
}

/**
 * Model Reaction
 * 
 */
export type Reaction = {
  id: string
  count: number | null
  section: string | null
  type: ReactionType | null
  createdAt: Date
  sessionId: string
  contentId: string
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ContentType: {
  PAGE: 'PAGE',
  POST: 'POST',
  PROJECT: 'PROJECT'
};

export type ContentType = (typeof ContentType)[keyof typeof ContentType]


export const ReactionType: {
  CLAPPING: 'CLAPPING',
  THINKING: 'THINKING',
  AMAZED: 'AMAZED'
};

export type ReactionType = (typeof ReactionType)[keyof typeof ReactionType]


export const ShareType: {
  TWITTER: 'TWITTER',
  CLIPBOARD: 'CLIPBOARD',
  OTHERS: 'OTHERS'
};

export type ShareType = (typeof ShareType)[keyof typeof ShareType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ContentMetas
 * const contentMetas = await prisma.contentMeta.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ContentMetas
   * const contentMetas = await prisma.contentMeta.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number}): Promise<R>;

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): PrismaPromise<Prisma.JsonObject>;

      /**
   * `prisma.contentMeta`: Exposes CRUD operations for the **ContentMeta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContentMetas
    * const contentMetas = await prisma.contentMeta.findMany()
    * ```
    */
  get contentMeta(): Prisma.ContentMetaDelegate<GlobalReject>;

  /**
   * `prisma.view`: Exposes CRUD operations for the **View** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Views
    * const views = await prisma.view.findMany()
    * ```
    */
  get view(): Prisma.ViewDelegate<GlobalReject>;

  /**
   * `prisma.share`: Exposes CRUD operations for the **Share** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shares
    * const shares = await prisma.share.findMany()
    * ```
    */
  get share(): Prisma.ShareDelegate<GlobalReject>;

  /**
   * `prisma.reaction`: Exposes CRUD operations for the **Reaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reactions
    * const reactions = await prisma.reaction.findMany()
    * ```
    */
  get reaction(): Prisma.ReactionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.1
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    ContentMeta: 'ContentMeta',
    View: 'View',
    Share: 'Share',
    Reaction: 'Reaction'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ContentMetaCountOutputType
   */


  export type ContentMetaCountOutputType = {
    views: number
    shares: number
    reactions: number
  }

  export type ContentMetaCountOutputTypeSelect = {
    views?: boolean
    shares?: boolean
    reactions?: boolean
  }

  export type ContentMetaCountOutputTypeGetPayload<S extends boolean | null | undefined | ContentMetaCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ContentMetaCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ContentMetaCountOutputTypeArgs)
    ? ContentMetaCountOutputType 
    : S extends { select: any } & (ContentMetaCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ContentMetaCountOutputType ? ContentMetaCountOutputType[P] : never
  } 
      : ContentMetaCountOutputType




  // Custom InputTypes

  /**
   * ContentMetaCountOutputType without action
   */
  export type ContentMetaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ContentMetaCountOutputType
     * 
    **/
    select?: ContentMetaCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model ContentMeta
   */


  export type AggregateContentMeta = {
    _count: ContentMetaCountAggregateOutputType | null
    _min: ContentMetaMinAggregateOutputType | null
    _max: ContentMetaMaxAggregateOutputType | null
  }

  export type ContentMetaMinAggregateOutputType = {
    id: string | null
    type: ContentType | null
    title: string | null
    slug: string | null
    createdAt: Date | null
  }

  export type ContentMetaMaxAggregateOutputType = {
    id: string | null
    type: ContentType | null
    title: string | null
    slug: string | null
    createdAt: Date | null
  }

  export type ContentMetaCountAggregateOutputType = {
    id: number
    type: number
    title: number
    slug: number
    createdAt: number
    _all: number
  }


  export type ContentMetaMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    slug?: true
    createdAt?: true
  }

  export type ContentMetaMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    slug?: true
    createdAt?: true
  }

  export type ContentMetaCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    slug?: true
    createdAt?: true
    _all?: true
  }

  export type ContentMetaAggregateArgs = {
    /**
     * Filter which ContentMeta to aggregate.
     * 
    **/
    where?: ContentMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentMetas to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentMetaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ContentMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentMetas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentMetas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContentMetas
    **/
    _count?: true | ContentMetaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentMetaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentMetaMaxAggregateInputType
  }

  export type GetContentMetaAggregateType<T extends ContentMetaAggregateArgs> = {
        [P in keyof T & keyof AggregateContentMeta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContentMeta[P]>
      : GetScalarType<T[P], AggregateContentMeta[P]>
  }




  export type ContentMetaGroupByArgs = {
    where?: ContentMetaWhereInput
    orderBy?: Enumerable<ContentMetaOrderByWithAggregationInput>
    by: Array<ContentMetaScalarFieldEnum>
    having?: ContentMetaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentMetaCountAggregateInputType | true
    _min?: ContentMetaMinAggregateInputType
    _max?: ContentMetaMaxAggregateInputType
  }


  export type ContentMetaGroupByOutputType = {
    id: string
    type: ContentType
    title: string
    slug: string
    createdAt: Date
    _count: ContentMetaCountAggregateOutputType | null
    _min: ContentMetaMinAggregateOutputType | null
    _max: ContentMetaMaxAggregateOutputType | null
  }

  type GetContentMetaGroupByPayload<T extends ContentMetaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ContentMetaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentMetaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentMetaGroupByOutputType[P]>
            : GetScalarType<T[P], ContentMetaGroupByOutputType[P]>
        }
      >
    >


  export type ContentMetaSelect = {
    id?: boolean
    type?: boolean
    title?: boolean
    slug?: boolean
    views?: boolean | ContentMeta$viewsArgs
    shares?: boolean | ContentMeta$sharesArgs
    reactions?: boolean | ContentMeta$reactionsArgs
    createdAt?: boolean
    _count?: boolean | ContentMetaCountOutputTypeArgs
  }


  export type ContentMetaInclude = {
    views?: boolean | ContentMeta$viewsArgs
    shares?: boolean | ContentMeta$sharesArgs
    reactions?: boolean | ContentMeta$reactionsArgs
    _count?: boolean | ContentMetaCountOutputTypeArgs
  } 

  export type ContentMetaGetPayload<S extends boolean | null | undefined | ContentMetaArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ContentMeta :
    S extends undefined ? never :
    S extends { include: any } & (ContentMetaArgs | ContentMetaFindManyArgs)
    ? ContentMeta  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'views' ? Array < ViewGetPayload<S['include'][P]>>  :
        P extends 'shares' ? Array < ShareGetPayload<S['include'][P]>>  :
        P extends 'reactions' ? Array < ReactionGetPayload<S['include'][P]>>  :
        P extends '_count' ? ContentMetaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ContentMetaArgs | ContentMetaFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'views' ? Array < ViewGetPayload<S['select'][P]>>  :
        P extends 'shares' ? Array < ShareGetPayload<S['select'][P]>>  :
        P extends 'reactions' ? Array < ReactionGetPayload<S['select'][P]>>  :
        P extends '_count' ? ContentMetaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof ContentMeta ? ContentMeta[P] : never
  } 
      : ContentMeta


  type ContentMetaCountArgs = Merge<
    Omit<ContentMetaFindManyArgs, 'select' | 'include'> & {
      select?: ContentMetaCountAggregateInputType | true
    }
  >

  export interface ContentMetaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one ContentMeta that matches the filter.
     * @param {ContentMetaFindUniqueArgs} args - Arguments to find a ContentMeta
     * @example
     * // Get one ContentMeta
     * const contentMeta = await prisma.contentMeta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContentMetaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContentMetaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ContentMeta'> extends True ? Prisma__ContentMetaClient<ContentMetaGetPayload<T>> : Prisma__ContentMetaClient<ContentMetaGetPayload<T> | null, null>

    /**
     * Find one ContentMeta that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContentMetaFindUniqueOrThrowArgs} args - Arguments to find a ContentMeta
     * @example
     * // Get one ContentMeta
     * const contentMeta = await prisma.contentMeta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContentMetaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ContentMetaFindUniqueOrThrowArgs>
    ): Prisma__ContentMetaClient<ContentMetaGetPayload<T>>

    /**
     * Find the first ContentMeta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentMetaFindFirstArgs} args - Arguments to find a ContentMeta
     * @example
     * // Get one ContentMeta
     * const contentMeta = await prisma.contentMeta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContentMetaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContentMetaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ContentMeta'> extends True ? Prisma__ContentMetaClient<ContentMetaGetPayload<T>> : Prisma__ContentMetaClient<ContentMetaGetPayload<T> | null, null>

    /**
     * Find the first ContentMeta that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentMetaFindFirstOrThrowArgs} args - Arguments to find a ContentMeta
     * @example
     * // Get one ContentMeta
     * const contentMeta = await prisma.contentMeta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContentMetaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ContentMetaFindFirstOrThrowArgs>
    ): Prisma__ContentMetaClient<ContentMetaGetPayload<T>>

    /**
     * Find zero or more ContentMetas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentMetaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContentMetas
     * const contentMetas = await prisma.contentMeta.findMany()
     * 
     * // Get first 10 ContentMetas
     * const contentMetas = await prisma.contentMeta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentMetaWithIdOnly = await prisma.contentMeta.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContentMetaFindManyArgs>(
      args?: SelectSubset<T, ContentMetaFindManyArgs>
    ): PrismaPromise<Array<ContentMetaGetPayload<T>>>

    /**
     * Create a ContentMeta.
     * @param {ContentMetaCreateArgs} args - Arguments to create a ContentMeta.
     * @example
     * // Create one ContentMeta
     * const ContentMeta = await prisma.contentMeta.create({
     *   data: {
     *     // ... data to create a ContentMeta
     *   }
     * })
     * 
    **/
    create<T extends ContentMetaCreateArgs>(
      args: SelectSubset<T, ContentMetaCreateArgs>
    ): Prisma__ContentMetaClient<ContentMetaGetPayload<T>>

    /**
     * Create many ContentMetas.
     *     @param {ContentMetaCreateManyArgs} args - Arguments to create many ContentMetas.
     *     @example
     *     // Create many ContentMetas
     *     const contentMeta = await prisma.contentMeta.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContentMetaCreateManyArgs>(
      args?: SelectSubset<T, ContentMetaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a ContentMeta.
     * @param {ContentMetaDeleteArgs} args - Arguments to delete one ContentMeta.
     * @example
     * // Delete one ContentMeta
     * const ContentMeta = await prisma.contentMeta.delete({
     *   where: {
     *     // ... filter to delete one ContentMeta
     *   }
     * })
     * 
    **/
    delete<T extends ContentMetaDeleteArgs>(
      args: SelectSubset<T, ContentMetaDeleteArgs>
    ): Prisma__ContentMetaClient<ContentMetaGetPayload<T>>

    /**
     * Update one ContentMeta.
     * @param {ContentMetaUpdateArgs} args - Arguments to update one ContentMeta.
     * @example
     * // Update one ContentMeta
     * const contentMeta = await prisma.contentMeta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContentMetaUpdateArgs>(
      args: SelectSubset<T, ContentMetaUpdateArgs>
    ): Prisma__ContentMetaClient<ContentMetaGetPayload<T>>

    /**
     * Delete zero or more ContentMetas.
     * @param {ContentMetaDeleteManyArgs} args - Arguments to filter ContentMetas to delete.
     * @example
     * // Delete a few ContentMetas
     * const { count } = await prisma.contentMeta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContentMetaDeleteManyArgs>(
      args?: SelectSubset<T, ContentMetaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContentMetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentMetaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContentMetas
     * const contentMeta = await prisma.contentMeta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContentMetaUpdateManyArgs>(
      args: SelectSubset<T, ContentMetaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ContentMeta.
     * @param {ContentMetaUpsertArgs} args - Arguments to update or create a ContentMeta.
     * @example
     * // Update or create a ContentMeta
     * const contentMeta = await prisma.contentMeta.upsert({
     *   create: {
     *     // ... data to create a ContentMeta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContentMeta we want to update
     *   }
     * })
    **/
    upsert<T extends ContentMetaUpsertArgs>(
      args: SelectSubset<T, ContentMetaUpsertArgs>
    ): Prisma__ContentMetaClient<ContentMetaGetPayload<T>>

    /**
     * Find zero or more ContentMetas that matches the filter.
     * @param {ContentMetaFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const contentMeta = await prisma.contentMeta.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ContentMetaFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ContentMeta.
     * @param {ContentMetaAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const contentMeta = await prisma.contentMeta.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ContentMetaAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of ContentMetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentMetaCountArgs} args - Arguments to filter ContentMetas to count.
     * @example
     * // Count the number of ContentMetas
     * const count = await prisma.contentMeta.count({
     *   where: {
     *     // ... the filter for the ContentMetas we want to count
     *   }
     * })
    **/
    count<T extends ContentMetaCountArgs>(
      args?: Subset<T, ContentMetaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentMetaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContentMeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentMetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentMetaAggregateArgs>(args: Subset<T, ContentMetaAggregateArgs>): PrismaPromise<GetContentMetaAggregateType<T>>

    /**
     * Group by ContentMeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentMetaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentMetaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentMetaGroupByArgs['orderBy'] }
        : { orderBy?: ContentMetaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentMetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentMetaGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ContentMeta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContentMetaClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    views<T extends ContentMeta$viewsArgs= {}>(args?: Subset<T, ContentMeta$viewsArgs>): PrismaPromise<Array<ViewGetPayload<T>>| Null>;

    shares<T extends ContentMeta$sharesArgs= {}>(args?: Subset<T, ContentMeta$sharesArgs>): PrismaPromise<Array<ShareGetPayload<T>>| Null>;

    reactions<T extends ContentMeta$reactionsArgs= {}>(args?: Subset<T, ContentMeta$reactionsArgs>): PrismaPromise<Array<ReactionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ContentMeta base type for findUnique actions
   */
  export type ContentMetaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * Filter, which ContentMeta to fetch.
     * 
    **/
    where: ContentMetaWhereUniqueInput
  }

  /**
   * ContentMeta findUnique
   */
  export interface ContentMetaFindUniqueArgs extends ContentMetaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ContentMeta findUniqueOrThrow
   */
  export type ContentMetaFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * Filter, which ContentMeta to fetch.
     * 
    **/
    where: ContentMetaWhereUniqueInput
  }


  /**
   * ContentMeta base type for findFirst actions
   */
  export type ContentMetaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * Filter, which ContentMeta to fetch.
     * 
    **/
    where?: ContentMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentMetas to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentMetaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentMetas.
     * 
    **/
    cursor?: ContentMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentMetas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentMetas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentMetas.
     * 
    **/
    distinct?: Enumerable<ContentMetaScalarFieldEnum>
  }

  /**
   * ContentMeta findFirst
   */
  export interface ContentMetaFindFirstArgs extends ContentMetaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ContentMeta findFirstOrThrow
   */
  export type ContentMetaFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * Filter, which ContentMeta to fetch.
     * 
    **/
    where?: ContentMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentMetas to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentMetaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContentMetas.
     * 
    **/
    cursor?: ContentMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentMetas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentMetas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContentMetas.
     * 
    **/
    distinct?: Enumerable<ContentMetaScalarFieldEnum>
  }


  /**
   * ContentMeta findMany
   */
  export type ContentMetaFindManyArgs = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * Filter, which ContentMetas to fetch.
     * 
    **/
    where?: ContentMetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContentMetas to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentMetaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContentMetas.
     * 
    **/
    cursor?: ContentMetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContentMetas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContentMetas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContentMetaScalarFieldEnum>
  }


  /**
   * ContentMeta create
   */
  export type ContentMetaCreateArgs = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * The data needed to create a ContentMeta.
     * 
    **/
    data: XOR<ContentMetaCreateInput, ContentMetaUncheckedCreateInput>
  }


  /**
   * ContentMeta createMany
   */
  export type ContentMetaCreateManyArgs = {
    /**
     * The data used to create many ContentMetas.
     * 
    **/
    data: Enumerable<ContentMetaCreateManyInput>
  }


  /**
   * ContentMeta update
   */
  export type ContentMetaUpdateArgs = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * The data needed to update a ContentMeta.
     * 
    **/
    data: XOR<ContentMetaUpdateInput, ContentMetaUncheckedUpdateInput>
    /**
     * Choose, which ContentMeta to update.
     * 
    **/
    where: ContentMetaWhereUniqueInput
  }


  /**
   * ContentMeta updateMany
   */
  export type ContentMetaUpdateManyArgs = {
    /**
     * The data used to update ContentMetas.
     * 
    **/
    data: XOR<ContentMetaUpdateManyMutationInput, ContentMetaUncheckedUpdateManyInput>
    /**
     * Filter which ContentMetas to update
     * 
    **/
    where?: ContentMetaWhereInput
  }


  /**
   * ContentMeta upsert
   */
  export type ContentMetaUpsertArgs = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * The filter to search for the ContentMeta to update in case it exists.
     * 
    **/
    where: ContentMetaWhereUniqueInput
    /**
     * In case the ContentMeta found by the `where` argument doesn't exist, create a new ContentMeta with this data.
     * 
    **/
    create: XOR<ContentMetaCreateInput, ContentMetaUncheckedCreateInput>
    /**
     * In case the ContentMeta was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ContentMetaUpdateInput, ContentMetaUncheckedUpdateInput>
  }


  /**
   * ContentMeta delete
   */
  export type ContentMetaDeleteArgs = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
    /**
     * Filter which ContentMeta to delete.
     * 
    **/
    where: ContentMetaWhereUniqueInput
  }


  /**
   * ContentMeta deleteMany
   */
  export type ContentMetaDeleteManyArgs = {
    /**
     * Filter which ContentMetas to delete
     * 
    **/
    where?: ContentMetaWhereInput
  }


  /**
   * ContentMeta findRaw
   */
  export type ContentMetaFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * ContentMeta aggregateRaw
   */
  export type ContentMetaAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * ContentMeta.views
   */
  export type ContentMeta$viewsArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    where?: ViewWhereInput
    orderBy?: Enumerable<ViewOrderByWithRelationInput>
    cursor?: ViewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ViewScalarFieldEnum>
  }


  /**
   * ContentMeta.shares
   */
  export type ContentMeta$sharesArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * ContentMeta.reactions
   */
  export type ContentMeta$reactionsArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    where?: ReactionWhereInput
    orderBy?: Enumerable<ReactionOrderByWithRelationInput>
    cursor?: ReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReactionScalarFieldEnum>
  }


  /**
   * ContentMeta without action
   */
  export type ContentMetaArgs = {
    /**
     * Select specific fields to fetch from the ContentMeta
     * 
    **/
    select?: ContentMetaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ContentMetaInclude | null
  }



  /**
   * Model View
   */


  export type AggregateView = {
    _count: ViewCountAggregateOutputType | null
    _min: ViewMinAggregateOutputType | null
    _max: ViewMaxAggregateOutputType | null
  }

  export type ViewMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    sessionId: string | null
    contentId: string | null
  }

  export type ViewMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    sessionId: string | null
    contentId: string | null
  }

  export type ViewCountAggregateOutputType = {
    id: number
    createdAt: number
    sessionId: number
    contentId: number
    _all: number
  }


  export type ViewMinAggregateInputType = {
    id?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
  }

  export type ViewMaxAggregateInputType = {
    id?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
  }

  export type ViewCountAggregateInputType = {
    id?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
    _all?: true
  }

  export type ViewAggregateArgs = {
    /**
     * Filter which View to aggregate.
     * 
    **/
    where?: ViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     * 
    **/
    orderBy?: Enumerable<ViewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Views
    **/
    _count?: true | ViewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ViewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ViewMaxAggregateInputType
  }

  export type GetViewAggregateType<T extends ViewAggregateArgs> = {
        [P in keyof T & keyof AggregateView]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateView[P]>
      : GetScalarType<T[P], AggregateView[P]>
  }




  export type ViewGroupByArgs = {
    where?: ViewWhereInput
    orderBy?: Enumerable<ViewOrderByWithAggregationInput>
    by: Array<ViewScalarFieldEnum>
    having?: ViewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ViewCountAggregateInputType | true
    _min?: ViewMinAggregateInputType
    _max?: ViewMaxAggregateInputType
  }


  export type ViewGroupByOutputType = {
    id: string
    createdAt: Date
    sessionId: string
    contentId: string
    _count: ViewCountAggregateOutputType | null
    _min: ViewMinAggregateOutputType | null
    _max: ViewMaxAggregateOutputType | null
  }

  type GetViewGroupByPayload<T extends ViewGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ViewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ViewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ViewGroupByOutputType[P]>
            : GetScalarType<T[P], ViewGroupByOutputType[P]>
        }
      >
    >


  export type ViewSelect = {
    id?: boolean
    createdAt?: boolean
    sessionId?: boolean
    contentId?: boolean
    content?: boolean | ContentMetaArgs
  }


  export type ViewInclude = {
    content?: boolean | ContentMetaArgs
  } 

  export type ViewGetPayload<S extends boolean | null | undefined | ViewArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? View :
    S extends undefined ? never :
    S extends { include: any } & (ViewArgs | ViewFindManyArgs)
    ? View  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'content' ? ContentMetaGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ViewArgs | ViewFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'content' ? ContentMetaGetPayload<S['select'][P]> :  P extends keyof View ? View[P] : never
  } 
      : View


  type ViewCountArgs = Merge<
    Omit<ViewFindManyArgs, 'select' | 'include'> & {
      select?: ViewCountAggregateInputType | true
    }
  >

  export interface ViewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one View that matches the filter.
     * @param {ViewFindUniqueArgs} args - Arguments to find a View
     * @example
     * // Get one View
     * const view = await prisma.view.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ViewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ViewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'View'> extends True ? Prisma__ViewClient<ViewGetPayload<T>> : Prisma__ViewClient<ViewGetPayload<T> | null, null>

    /**
     * Find one View that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ViewFindUniqueOrThrowArgs} args - Arguments to find a View
     * @example
     * // Get one View
     * const view = await prisma.view.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ViewFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ViewFindUniqueOrThrowArgs>
    ): Prisma__ViewClient<ViewGetPayload<T>>

    /**
     * Find the first View that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewFindFirstArgs} args - Arguments to find a View
     * @example
     * // Get one View
     * const view = await prisma.view.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ViewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ViewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'View'> extends True ? Prisma__ViewClient<ViewGetPayload<T>> : Prisma__ViewClient<ViewGetPayload<T> | null, null>

    /**
     * Find the first View that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewFindFirstOrThrowArgs} args - Arguments to find a View
     * @example
     * // Get one View
     * const view = await prisma.view.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ViewFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ViewFindFirstOrThrowArgs>
    ): Prisma__ViewClient<ViewGetPayload<T>>

    /**
     * Find zero or more Views that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Views
     * const views = await prisma.view.findMany()
     * 
     * // Get first 10 Views
     * const views = await prisma.view.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const viewWithIdOnly = await prisma.view.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ViewFindManyArgs>(
      args?: SelectSubset<T, ViewFindManyArgs>
    ): PrismaPromise<Array<ViewGetPayload<T>>>

    /**
     * Create a View.
     * @param {ViewCreateArgs} args - Arguments to create a View.
     * @example
     * // Create one View
     * const View = await prisma.view.create({
     *   data: {
     *     // ... data to create a View
     *   }
     * })
     * 
    **/
    create<T extends ViewCreateArgs>(
      args: SelectSubset<T, ViewCreateArgs>
    ): Prisma__ViewClient<ViewGetPayload<T>>

    /**
     * Create many Views.
     *     @param {ViewCreateManyArgs} args - Arguments to create many Views.
     *     @example
     *     // Create many Views
     *     const view = await prisma.view.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ViewCreateManyArgs>(
      args?: SelectSubset<T, ViewCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a View.
     * @param {ViewDeleteArgs} args - Arguments to delete one View.
     * @example
     * // Delete one View
     * const View = await prisma.view.delete({
     *   where: {
     *     // ... filter to delete one View
     *   }
     * })
     * 
    **/
    delete<T extends ViewDeleteArgs>(
      args: SelectSubset<T, ViewDeleteArgs>
    ): Prisma__ViewClient<ViewGetPayload<T>>

    /**
     * Update one View.
     * @param {ViewUpdateArgs} args - Arguments to update one View.
     * @example
     * // Update one View
     * const view = await prisma.view.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ViewUpdateArgs>(
      args: SelectSubset<T, ViewUpdateArgs>
    ): Prisma__ViewClient<ViewGetPayload<T>>

    /**
     * Delete zero or more Views.
     * @param {ViewDeleteManyArgs} args - Arguments to filter Views to delete.
     * @example
     * // Delete a few Views
     * const { count } = await prisma.view.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ViewDeleteManyArgs>(
      args?: SelectSubset<T, ViewDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Views
     * const view = await prisma.view.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ViewUpdateManyArgs>(
      args: SelectSubset<T, ViewUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one View.
     * @param {ViewUpsertArgs} args - Arguments to update or create a View.
     * @example
     * // Update or create a View
     * const view = await prisma.view.upsert({
     *   create: {
     *     // ... data to create a View
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the View we want to update
     *   }
     * })
    **/
    upsert<T extends ViewUpsertArgs>(
      args: SelectSubset<T, ViewUpsertArgs>
    ): Prisma__ViewClient<ViewGetPayload<T>>

    /**
     * Find zero or more Views that matches the filter.
     * @param {ViewFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const view = await prisma.view.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ViewFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a View.
     * @param {ViewAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const view = await prisma.view.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ViewAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of Views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewCountArgs} args - Arguments to filter Views to count.
     * @example
     * // Count the number of Views
     * const count = await prisma.view.count({
     *   where: {
     *     // ... the filter for the Views we want to count
     *   }
     * })
    **/
    count<T extends ViewCountArgs>(
      args?: Subset<T, ViewCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ViewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a View.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ViewAggregateArgs>(args: Subset<T, ViewAggregateArgs>): PrismaPromise<GetViewAggregateType<T>>

    /**
     * Group by View.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ViewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ViewGroupByArgs['orderBy'] }
        : { orderBy?: ViewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViewGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for View.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ViewClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    content<T extends ContentMetaArgs= {}>(args?: Subset<T, ContentMetaArgs>): Prisma__ContentMetaClient<ContentMetaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * View base type for findUnique actions
   */
  export type ViewFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * Filter, which View to fetch.
     * 
    **/
    where: ViewWhereUniqueInput
  }

  /**
   * View findUnique
   */
  export interface ViewFindUniqueArgs extends ViewFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * View findUniqueOrThrow
   */
  export type ViewFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * Filter, which View to fetch.
     * 
    **/
    where: ViewWhereUniqueInput
  }


  /**
   * View base type for findFirst actions
   */
  export type ViewFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * Filter, which View to fetch.
     * 
    **/
    where?: ViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     * 
    **/
    orderBy?: Enumerable<ViewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Views.
     * 
    **/
    cursor?: ViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Views.
     * 
    **/
    distinct?: Enumerable<ViewScalarFieldEnum>
  }

  /**
   * View findFirst
   */
  export interface ViewFindFirstArgs extends ViewFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * View findFirstOrThrow
   */
  export type ViewFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * Filter, which View to fetch.
     * 
    **/
    where?: ViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     * 
    **/
    orderBy?: Enumerable<ViewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Views.
     * 
    **/
    cursor?: ViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Views.
     * 
    **/
    distinct?: Enumerable<ViewScalarFieldEnum>
  }


  /**
   * View findMany
   */
  export type ViewFindManyArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * Filter, which Views to fetch.
     * 
    **/
    where?: ViewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     * 
    **/
    orderBy?: Enumerable<ViewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Views.
     * 
    **/
    cursor?: ViewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ViewScalarFieldEnum>
  }


  /**
   * View create
   */
  export type ViewCreateArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * The data needed to create a View.
     * 
    **/
    data: XOR<ViewCreateInput, ViewUncheckedCreateInput>
  }


  /**
   * View createMany
   */
  export type ViewCreateManyArgs = {
    /**
     * The data used to create many Views.
     * 
    **/
    data: Enumerable<ViewCreateManyInput>
  }


  /**
   * View update
   */
  export type ViewUpdateArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * The data needed to update a View.
     * 
    **/
    data: XOR<ViewUpdateInput, ViewUncheckedUpdateInput>
    /**
     * Choose, which View to update.
     * 
    **/
    where: ViewWhereUniqueInput
  }


  /**
   * View updateMany
   */
  export type ViewUpdateManyArgs = {
    /**
     * The data used to update Views.
     * 
    **/
    data: XOR<ViewUpdateManyMutationInput, ViewUncheckedUpdateManyInput>
    /**
     * Filter which Views to update
     * 
    **/
    where?: ViewWhereInput
  }


  /**
   * View upsert
   */
  export type ViewUpsertArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * The filter to search for the View to update in case it exists.
     * 
    **/
    where: ViewWhereUniqueInput
    /**
     * In case the View found by the `where` argument doesn't exist, create a new View with this data.
     * 
    **/
    create: XOR<ViewCreateInput, ViewUncheckedCreateInput>
    /**
     * In case the View was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ViewUpdateInput, ViewUncheckedUpdateInput>
  }


  /**
   * View delete
   */
  export type ViewDeleteArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
    /**
     * Filter which View to delete.
     * 
    **/
    where: ViewWhereUniqueInput
  }


  /**
   * View deleteMany
   */
  export type ViewDeleteManyArgs = {
    /**
     * Filter which Views to delete
     * 
    **/
    where?: ViewWhereInput
  }


  /**
   * View findRaw
   */
  export type ViewFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * View aggregateRaw
   */
  export type ViewAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * View without action
   */
  export type ViewArgs = {
    /**
     * Select specific fields to fetch from the View
     * 
    **/
    select?: ViewSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ViewInclude | null
  }



  /**
   * Model Share
   */


  export type AggregateShare = {
    _count: ShareCountAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  export type ShareMinAggregateOutputType = {
    id: string | null
    type: ShareType | null
    createdAt: Date | null
    sessionId: string | null
    contentId: string | null
  }

  export type ShareMaxAggregateOutputType = {
    id: string | null
    type: ShareType | null
    createdAt: Date | null
    sessionId: string | null
    contentId: string | null
  }

  export type ShareCountAggregateOutputType = {
    id: number
    type: number
    createdAt: number
    sessionId: number
    contentId: number
    _all: number
  }


  export type ShareMinAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
  }

  export type ShareMaxAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
  }

  export type ShareCountAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
    _all?: true
  }

  export type ShareAggregateArgs = {
    /**
     * Filter which Share to aggregate.
     * 
    **/
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     * 
    **/
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shares
    **/
    _count?: true | ShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareMaxAggregateInputType
  }

  export type GetShareAggregateType<T extends ShareAggregateArgs> = {
        [P in keyof T & keyof AggregateShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShare[P]>
      : GetScalarType<T[P], AggregateShare[P]>
  }




  export type ShareGroupByArgs = {
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithAggregationInput>
    by: Array<ShareScalarFieldEnum>
    having?: ShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareCountAggregateInputType | true
    _min?: ShareMinAggregateInputType
    _max?: ShareMaxAggregateInputType
  }


  export type ShareGroupByOutputType = {
    id: string
    type: ShareType | null
    createdAt: Date
    sessionId: string
    contentId: string
    _count: ShareCountAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  type GetShareGroupByPayload<T extends ShareGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareGroupByOutputType[P]>
            : GetScalarType<T[P], ShareGroupByOutputType[P]>
        }
      >
    >


  export type ShareSelect = {
    id?: boolean
    type?: boolean
    createdAt?: boolean
    sessionId?: boolean
    contentId?: boolean
    content?: boolean | ContentMetaArgs
  }


  export type ShareInclude = {
    content?: boolean | ContentMetaArgs
  } 

  export type ShareGetPayload<S extends boolean | null | undefined | ShareArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Share :
    S extends undefined ? never :
    S extends { include: any } & (ShareArgs | ShareFindManyArgs)
    ? Share  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'content' ? ContentMetaGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ShareArgs | ShareFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'content' ? ContentMetaGetPayload<S['select'][P]> :  P extends keyof Share ? Share[P] : never
  } 
      : Share


  type ShareCountArgs = Merge<
    Omit<ShareFindManyArgs, 'select' | 'include'> & {
      select?: ShareCountAggregateInputType | true
    }
  >

  export interface ShareDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Share that matches the filter.
     * @param {ShareFindUniqueArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShareFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShareFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Share'> extends True ? Prisma__ShareClient<ShareGetPayload<T>> : Prisma__ShareClient<ShareGetPayload<T> | null, null>

    /**
     * Find one Share that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ShareFindUniqueOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShareFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ShareFindUniqueOrThrowArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Find the first Share that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShareFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShareFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Share'> extends True ? Prisma__ShareClient<ShareGetPayload<T>> : Prisma__ShareClient<ShareGetPayload<T> | null, null>

    /**
     * Find the first Share that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShareFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ShareFindFirstOrThrowArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Find zero or more Shares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shares
     * const shares = await prisma.share.findMany()
     * 
     * // Get first 10 Shares
     * const shares = await prisma.share.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareWithIdOnly = await prisma.share.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShareFindManyArgs>(
      args?: SelectSubset<T, ShareFindManyArgs>
    ): PrismaPromise<Array<ShareGetPayload<T>>>

    /**
     * Create a Share.
     * @param {ShareCreateArgs} args - Arguments to create a Share.
     * @example
     * // Create one Share
     * const Share = await prisma.share.create({
     *   data: {
     *     // ... data to create a Share
     *   }
     * })
     * 
    **/
    create<T extends ShareCreateArgs>(
      args: SelectSubset<T, ShareCreateArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Create many Shares.
     *     @param {ShareCreateManyArgs} args - Arguments to create many Shares.
     *     @example
     *     // Create many Shares
     *     const share = await prisma.share.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShareCreateManyArgs>(
      args?: SelectSubset<T, ShareCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Share.
     * @param {ShareDeleteArgs} args - Arguments to delete one Share.
     * @example
     * // Delete one Share
     * const Share = await prisma.share.delete({
     *   where: {
     *     // ... filter to delete one Share
     *   }
     * })
     * 
    **/
    delete<T extends ShareDeleteArgs>(
      args: SelectSubset<T, ShareDeleteArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Update one Share.
     * @param {ShareUpdateArgs} args - Arguments to update one Share.
     * @example
     * // Update one Share
     * const share = await prisma.share.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShareUpdateArgs>(
      args: SelectSubset<T, ShareUpdateArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Delete zero or more Shares.
     * @param {ShareDeleteManyArgs} args - Arguments to filter Shares to delete.
     * @example
     * // Delete a few Shares
     * const { count } = await prisma.share.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShareDeleteManyArgs>(
      args?: SelectSubset<T, ShareDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shares
     * const share = await prisma.share.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShareUpdateManyArgs>(
      args: SelectSubset<T, ShareUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Share.
     * @param {ShareUpsertArgs} args - Arguments to update or create a Share.
     * @example
     * // Update or create a Share
     * const share = await prisma.share.upsert({
     *   create: {
     *     // ... data to create a Share
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Share we want to update
     *   }
     * })
    **/
    upsert<T extends ShareUpsertArgs>(
      args: SelectSubset<T, ShareUpsertArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Find zero or more Shares that matches the filter.
     * @param {ShareFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const share = await prisma.share.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ShareFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Share.
     * @param {ShareAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const share = await prisma.share.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ShareAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareCountArgs} args - Arguments to filter Shares to count.
     * @example
     * // Count the number of Shares
     * const count = await prisma.share.count({
     *   where: {
     *     // ... the filter for the Shares we want to count
     *   }
     * })
    **/
    count<T extends ShareCountArgs>(
      args?: Subset<T, ShareCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareAggregateArgs>(args: Subset<T, ShareAggregateArgs>): PrismaPromise<GetShareAggregateType<T>>

    /**
     * Group by Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareGroupByArgs['orderBy'] }
        : { orderBy?: ShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Share.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShareClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    content<T extends ContentMetaArgs= {}>(args?: Subset<T, ContentMetaArgs>): Prisma__ContentMetaClient<ContentMetaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Share base type for findUnique actions
   */
  export type ShareFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     * 
    **/
    where: ShareWhereUniqueInput
  }

  /**
   * Share findUnique
   */
  export interface ShareFindUniqueArgs extends ShareFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Share findUniqueOrThrow
   */
  export type ShareFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     * 
    **/
    where: ShareWhereUniqueInput
  }


  /**
   * Share base type for findFirst actions
   */
  export type ShareFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     * 
    **/
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     * 
    **/
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     * 
    **/
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     * 
    **/
    distinct?: Enumerable<ShareScalarFieldEnum>
  }

  /**
   * Share findFirst
   */
  export interface ShareFindFirstArgs extends ShareFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Share findFirstOrThrow
   */
  export type ShareFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     * 
    **/
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     * 
    **/
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     * 
    **/
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     * 
    **/
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * Share findMany
   */
  export type ShareFindManyArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * Filter, which Shares to fetch.
     * 
    **/
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     * 
    **/
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shares.
     * 
    **/
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * Share create
   */
  export type ShareCreateArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * The data needed to create a Share.
     * 
    **/
    data: XOR<ShareCreateInput, ShareUncheckedCreateInput>
  }


  /**
   * Share createMany
   */
  export type ShareCreateManyArgs = {
    /**
     * The data used to create many Shares.
     * 
    **/
    data: Enumerable<ShareCreateManyInput>
  }


  /**
   * Share update
   */
  export type ShareUpdateArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * The data needed to update a Share.
     * 
    **/
    data: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
    /**
     * Choose, which Share to update.
     * 
    **/
    where: ShareWhereUniqueInput
  }


  /**
   * Share updateMany
   */
  export type ShareUpdateManyArgs = {
    /**
     * The data used to update Shares.
     * 
    **/
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyInput>
    /**
     * Filter which Shares to update
     * 
    **/
    where?: ShareWhereInput
  }


  /**
   * Share upsert
   */
  export type ShareUpsertArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * The filter to search for the Share to update in case it exists.
     * 
    **/
    where: ShareWhereUniqueInput
    /**
     * In case the Share found by the `where` argument doesn't exist, create a new Share with this data.
     * 
    **/
    create: XOR<ShareCreateInput, ShareUncheckedCreateInput>
    /**
     * In case the Share was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
  }


  /**
   * Share delete
   */
  export type ShareDeleteArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
    /**
     * Filter which Share to delete.
     * 
    **/
    where: ShareWhereUniqueInput
  }


  /**
   * Share deleteMany
   */
  export type ShareDeleteManyArgs = {
    /**
     * Filter which Shares to delete
     * 
    **/
    where?: ShareWhereInput
  }


  /**
   * Share findRaw
   */
  export type ShareFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Share aggregateRaw
   */
  export type ShareAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Share without action
   */
  export type ShareArgs = {
    /**
     * Select specific fields to fetch from the Share
     * 
    **/
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ShareInclude | null
  }



  /**
   * Model Reaction
   */


  export type AggregateReaction = {
    _count: ReactionCountAggregateOutputType | null
    _avg: ReactionAvgAggregateOutputType | null
    _sum: ReactionSumAggregateOutputType | null
    _min: ReactionMinAggregateOutputType | null
    _max: ReactionMaxAggregateOutputType | null
  }

  export type ReactionAvgAggregateOutputType = {
    count: number | null
  }

  export type ReactionSumAggregateOutputType = {
    count: number | null
  }

  export type ReactionMinAggregateOutputType = {
    id: string | null
    count: number | null
    section: string | null
    type: ReactionType | null
    createdAt: Date | null
    sessionId: string | null
    contentId: string | null
  }

  export type ReactionMaxAggregateOutputType = {
    id: string | null
    count: number | null
    section: string | null
    type: ReactionType | null
    createdAt: Date | null
    sessionId: string | null
    contentId: string | null
  }

  export type ReactionCountAggregateOutputType = {
    id: number
    count: number
    section: number
    type: number
    createdAt: number
    sessionId: number
    contentId: number
    _all: number
  }


  export type ReactionAvgAggregateInputType = {
    count?: true
  }

  export type ReactionSumAggregateInputType = {
    count?: true
  }

  export type ReactionMinAggregateInputType = {
    id?: true
    count?: true
    section?: true
    type?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
  }

  export type ReactionMaxAggregateInputType = {
    id?: true
    count?: true
    section?: true
    type?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
  }

  export type ReactionCountAggregateInputType = {
    id?: true
    count?: true
    section?: true
    type?: true
    createdAt?: true
    sessionId?: true
    contentId?: true
    _all?: true
  }

  export type ReactionAggregateArgs = {
    /**
     * Filter which Reaction to aggregate.
     * 
    **/
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reactions
    **/
    _count?: true | ReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReactionMaxAggregateInputType
  }

  export type GetReactionAggregateType<T extends ReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReaction[P]>
      : GetScalarType<T[P], AggregateReaction[P]>
  }




  export type ReactionGroupByArgs = {
    where?: ReactionWhereInput
    orderBy?: Enumerable<ReactionOrderByWithAggregationInput>
    by: Array<ReactionScalarFieldEnum>
    having?: ReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReactionCountAggregateInputType | true
    _avg?: ReactionAvgAggregateInputType
    _sum?: ReactionSumAggregateInputType
    _min?: ReactionMinAggregateInputType
    _max?: ReactionMaxAggregateInputType
  }


  export type ReactionGroupByOutputType = {
    id: string
    count: number | null
    section: string | null
    type: ReactionType | null
    createdAt: Date
    sessionId: string
    contentId: string
    _count: ReactionCountAggregateOutputType | null
    _avg: ReactionAvgAggregateOutputType | null
    _sum: ReactionSumAggregateOutputType | null
    _min: ReactionMinAggregateOutputType | null
    _max: ReactionMaxAggregateOutputType | null
  }

  type GetReactionGroupByPayload<T extends ReactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReactionGroupByOutputType[P]>
            : GetScalarType<T[P], ReactionGroupByOutputType[P]>
        }
      >
    >


  export type ReactionSelect = {
    id?: boolean
    count?: boolean
    section?: boolean
    type?: boolean
    createdAt?: boolean
    sessionId?: boolean
    contentId?: boolean
    content?: boolean | ContentMetaArgs
  }


  export type ReactionInclude = {
    content?: boolean | ContentMetaArgs
  } 

  export type ReactionGetPayload<S extends boolean | null | undefined | ReactionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Reaction :
    S extends undefined ? never :
    S extends { include: any } & (ReactionArgs | ReactionFindManyArgs)
    ? Reaction  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'content' ? ContentMetaGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ReactionArgs | ReactionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'content' ? ContentMetaGetPayload<S['select'][P]> :  P extends keyof Reaction ? Reaction[P] : never
  } 
      : Reaction


  type ReactionCountArgs = Merge<
    Omit<ReactionFindManyArgs, 'select' | 'include'> & {
      select?: ReactionCountAggregateInputType | true
    }
  >

  export interface ReactionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Reaction that matches the filter.
     * @param {ReactionFindUniqueArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reaction'> extends True ? Prisma__ReactionClient<ReactionGetPayload<T>> : Prisma__ReactionClient<ReactionGetPayload<T> | null, null>

    /**
     * Find one Reaction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReactionFindUniqueOrThrowArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReactionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReactionFindUniqueOrThrowArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Find the first Reaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindFirstArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reaction'> extends True ? Prisma__ReactionClient<ReactionGetPayload<T>> : Prisma__ReactionClient<ReactionGetPayload<T> | null, null>

    /**
     * Find the first Reaction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindFirstOrThrowArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReactionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReactionFindFirstOrThrowArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Find zero or more Reactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reactions
     * const reactions = await prisma.reaction.findMany()
     * 
     * // Get first 10 Reactions
     * const reactions = await prisma.reaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reactionWithIdOnly = await prisma.reaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReactionFindManyArgs>(
      args?: SelectSubset<T, ReactionFindManyArgs>
    ): PrismaPromise<Array<ReactionGetPayload<T>>>

    /**
     * Create a Reaction.
     * @param {ReactionCreateArgs} args - Arguments to create a Reaction.
     * @example
     * // Create one Reaction
     * const Reaction = await prisma.reaction.create({
     *   data: {
     *     // ... data to create a Reaction
     *   }
     * })
     * 
    **/
    create<T extends ReactionCreateArgs>(
      args: SelectSubset<T, ReactionCreateArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Create many Reactions.
     *     @param {ReactionCreateManyArgs} args - Arguments to create many Reactions.
     *     @example
     *     // Create many Reactions
     *     const reaction = await prisma.reaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReactionCreateManyArgs>(
      args?: SelectSubset<T, ReactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reaction.
     * @param {ReactionDeleteArgs} args - Arguments to delete one Reaction.
     * @example
     * // Delete one Reaction
     * const Reaction = await prisma.reaction.delete({
     *   where: {
     *     // ... filter to delete one Reaction
     *   }
     * })
     * 
    **/
    delete<T extends ReactionDeleteArgs>(
      args: SelectSubset<T, ReactionDeleteArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Update one Reaction.
     * @param {ReactionUpdateArgs} args - Arguments to update one Reaction.
     * @example
     * // Update one Reaction
     * const reaction = await prisma.reaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReactionUpdateArgs>(
      args: SelectSubset<T, ReactionUpdateArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Delete zero or more Reactions.
     * @param {ReactionDeleteManyArgs} args - Arguments to filter Reactions to delete.
     * @example
     * // Delete a few Reactions
     * const { count } = await prisma.reaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReactionDeleteManyArgs>(
      args?: SelectSubset<T, ReactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reactions
     * const reaction = await prisma.reaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReactionUpdateManyArgs>(
      args: SelectSubset<T, ReactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reaction.
     * @param {ReactionUpsertArgs} args - Arguments to update or create a Reaction.
     * @example
     * // Update or create a Reaction
     * const reaction = await prisma.reaction.upsert({
     *   create: {
     *     // ... data to create a Reaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reaction we want to update
     *   }
     * })
    **/
    upsert<T extends ReactionUpsertArgs>(
      args: SelectSubset<T, ReactionUpsertArgs>
    ): Prisma__ReactionClient<ReactionGetPayload<T>>

    /**
     * Find zero or more Reactions that matches the filter.
     * @param {ReactionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const reaction = await prisma.reaction.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ReactionFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Reaction.
     * @param {ReactionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const reaction = await prisma.reaction.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ReactionAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Count the number of Reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionCountArgs} args - Arguments to filter Reactions to count.
     * @example
     * // Count the number of Reactions
     * const count = await prisma.reaction.count({
     *   where: {
     *     // ... the filter for the Reactions we want to count
     *   }
     * })
    **/
    count<T extends ReactionCountArgs>(
      args?: Subset<T, ReactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReactionAggregateArgs>(args: Subset<T, ReactionAggregateArgs>): PrismaPromise<GetReactionAggregateType<T>>

    /**
     * Group by Reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReactionGroupByArgs['orderBy'] }
        : { orderBy?: ReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReactionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Reaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReactionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    content<T extends ContentMetaArgs= {}>(args?: Subset<T, ContentMetaArgs>): Prisma__ContentMetaClient<ContentMetaGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Reaction base type for findUnique actions
   */
  export type ReactionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * Filter, which Reaction to fetch.
     * 
    **/
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction findUnique
   */
  export interface ReactionFindUniqueArgs extends ReactionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reaction findUniqueOrThrow
   */
  export type ReactionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * Filter, which Reaction to fetch.
     * 
    **/
    where: ReactionWhereUniqueInput
  }


  /**
   * Reaction base type for findFirst actions
   */
  export type ReactionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * Filter, which Reaction to fetch.
     * 
    **/
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reactions.
     * 
    **/
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reactions.
     * 
    **/
    distinct?: Enumerable<ReactionScalarFieldEnum>
  }

  /**
   * Reaction findFirst
   */
  export interface ReactionFindFirstArgs extends ReactionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reaction findFirstOrThrow
   */
  export type ReactionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * Filter, which Reaction to fetch.
     * 
    **/
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reactions.
     * 
    **/
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reactions.
     * 
    **/
    distinct?: Enumerable<ReactionScalarFieldEnum>
  }


  /**
   * Reaction findMany
   */
  export type ReactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * Filter, which Reactions to fetch.
     * 
    **/
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     * 
    **/
    orderBy?: Enumerable<ReactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reactions.
     * 
    **/
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReactionScalarFieldEnum>
  }


  /**
   * Reaction create
   */
  export type ReactionCreateArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * The data needed to create a Reaction.
     * 
    **/
    data: XOR<ReactionCreateInput, ReactionUncheckedCreateInput>
  }


  /**
   * Reaction createMany
   */
  export type ReactionCreateManyArgs = {
    /**
     * The data used to create many Reactions.
     * 
    **/
    data: Enumerable<ReactionCreateManyInput>
  }


  /**
   * Reaction update
   */
  export type ReactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * The data needed to update a Reaction.
     * 
    **/
    data: XOR<ReactionUpdateInput, ReactionUncheckedUpdateInput>
    /**
     * Choose, which Reaction to update.
     * 
    **/
    where: ReactionWhereUniqueInput
  }


  /**
   * Reaction updateMany
   */
  export type ReactionUpdateManyArgs = {
    /**
     * The data used to update Reactions.
     * 
    **/
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyInput>
    /**
     * Filter which Reactions to update
     * 
    **/
    where?: ReactionWhereInput
  }


  /**
   * Reaction upsert
   */
  export type ReactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * The filter to search for the Reaction to update in case it exists.
     * 
    **/
    where: ReactionWhereUniqueInput
    /**
     * In case the Reaction found by the `where` argument doesn't exist, create a new Reaction with this data.
     * 
    **/
    create: XOR<ReactionCreateInput, ReactionUncheckedCreateInput>
    /**
     * In case the Reaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReactionUpdateInput, ReactionUncheckedUpdateInput>
  }


  /**
   * Reaction delete
   */
  export type ReactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
    /**
     * Filter which Reaction to delete.
     * 
    **/
    where: ReactionWhereUniqueInput
  }


  /**
   * Reaction deleteMany
   */
  export type ReactionDeleteManyArgs = {
    /**
     * Filter which Reactions to delete
     * 
    **/
    where?: ReactionWhereInput
  }


  /**
   * Reaction findRaw
   */
  export type ReactionFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Reaction aggregateRaw
   */
  export type ReactionAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Reaction without action
   */
  export type ReactionArgs = {
    /**
     * Select specific fields to fetch from the Reaction
     * 
    **/
    select?: ReactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ReactionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ContentMetaScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    slug: 'slug',
    createdAt: 'createdAt'
  };

  export type ContentMetaScalarFieldEnum = (typeof ContentMetaScalarFieldEnum)[keyof typeof ContentMetaScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReactionScalarFieldEnum: {
    id: 'id',
    count: 'count',
    section: 'section',
    type: 'type',
    createdAt: 'createdAt',
    sessionId: 'sessionId',
    contentId: 'contentId'
  };

  export type ReactionScalarFieldEnum = (typeof ReactionScalarFieldEnum)[keyof typeof ReactionScalarFieldEnum]


  export const ShareScalarFieldEnum: {
    id: 'id',
    type: 'type',
    createdAt: 'createdAt',
    sessionId: 'sessionId',
    contentId: 'contentId'
  };

  export type ShareScalarFieldEnum = (typeof ShareScalarFieldEnum)[keyof typeof ShareScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const ViewScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    sessionId: 'sessionId',
    contentId: 'contentId'
  };

  export type ViewScalarFieldEnum = (typeof ViewScalarFieldEnum)[keyof typeof ViewScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type ContentMetaWhereInput = {
    AND?: Enumerable<ContentMetaWhereInput>
    OR?: Enumerable<ContentMetaWhereInput>
    NOT?: Enumerable<ContentMetaWhereInput>
    id?: StringFilter | string
    type?: EnumContentTypeFilter | ContentType
    title?: StringFilter | string
    slug?: StringFilter | string
    views?: ViewListRelationFilter
    shares?: ShareListRelationFilter
    reactions?: ReactionListRelationFilter
    createdAt?: DateTimeFilter | Date | string
  }

  export type ContentMetaOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    views?: ViewOrderByRelationAggregateInput
    shares?: ShareOrderByRelationAggregateInput
    reactions?: ReactionOrderByRelationAggregateInput
    createdAt?: SortOrder
  }

  export type ContentMetaWhereUniqueInput = {
    id?: string
    slug?: string
  }

  export type ContentMetaOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
    _count?: ContentMetaCountOrderByAggregateInput
    _max?: ContentMetaMaxOrderByAggregateInput
    _min?: ContentMetaMinOrderByAggregateInput
  }

  export type ContentMetaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContentMetaScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContentMetaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContentMetaScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    type?: EnumContentTypeWithAggregatesFilter | ContentType
    title?: StringWithAggregatesFilter | string
    slug?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ViewWhereInput = {
    AND?: Enumerable<ViewWhereInput>
    OR?: Enumerable<ViewWhereInput>
    NOT?: Enumerable<ViewWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    sessionId?: StringFilter | string
    contentId?: StringFilter | string
    content?: XOR<ContentMetaRelationFilter, ContentMetaWhereInput>
  }

  export type ViewOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
    content?: ContentMetaOrderByWithRelationInput
  }

  export type ViewWhereUniqueInput = {
    id?: string
  }

  export type ViewOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
    _count?: ViewCountOrderByAggregateInput
    _max?: ViewMaxOrderByAggregateInput
    _min?: ViewMinOrderByAggregateInput
  }

  export type ViewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ViewScalarWhereWithAggregatesInput>
    OR?: Enumerable<ViewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ViewScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    sessionId?: StringWithAggregatesFilter | string
    contentId?: StringWithAggregatesFilter | string
  }

  export type ShareWhereInput = {
    AND?: Enumerable<ShareWhereInput>
    OR?: Enumerable<ShareWhereInput>
    NOT?: Enumerable<ShareWhereInput>
    id?: StringFilter | string
    type?: EnumShareTypeNullableFilter | ShareType | null
    createdAt?: DateTimeFilter | Date | string
    sessionId?: StringFilter | string
    contentId?: StringFilter | string
    content?: XOR<ContentMetaRelationFilter, ContentMetaWhereInput>
  }

  export type ShareOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
    content?: ContentMetaOrderByWithRelationInput
  }

  export type ShareWhereUniqueInput = {
    id?: string
  }

  export type ShareOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
    _count?: ShareCountOrderByAggregateInput
    _max?: ShareMaxOrderByAggregateInput
    _min?: ShareMinOrderByAggregateInput
  }

  export type ShareScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShareScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShareScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShareScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    type?: EnumShareTypeNullableWithAggregatesFilter | ShareType | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    sessionId?: StringWithAggregatesFilter | string
    contentId?: StringWithAggregatesFilter | string
  }

  export type ReactionWhereInput = {
    AND?: Enumerable<ReactionWhereInput>
    OR?: Enumerable<ReactionWhereInput>
    NOT?: Enumerable<ReactionWhereInput>
    id?: StringFilter | string
    count?: IntNullableFilter | number | null
    section?: StringNullableFilter | string | null
    type?: EnumReactionTypeNullableFilter | ReactionType | null
    createdAt?: DateTimeFilter | Date | string
    sessionId?: StringFilter | string
    contentId?: StringFilter | string
    content?: XOR<ContentMetaRelationFilter, ContentMetaWhereInput>
  }

  export type ReactionOrderByWithRelationInput = {
    id?: SortOrder
    count?: SortOrder
    section?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
    content?: ContentMetaOrderByWithRelationInput
  }

  export type ReactionWhereUniqueInput = {
    id?: string
  }

  export type ReactionOrderByWithAggregationInput = {
    id?: SortOrder
    count?: SortOrder
    section?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
    _count?: ReactionCountOrderByAggregateInput
    _avg?: ReactionAvgOrderByAggregateInput
    _max?: ReactionMaxOrderByAggregateInput
    _min?: ReactionMinOrderByAggregateInput
    _sum?: ReactionSumOrderByAggregateInput
  }

  export type ReactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReactionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    count?: IntNullableWithAggregatesFilter | number | null
    section?: StringNullableWithAggregatesFilter | string | null
    type?: EnumReactionTypeNullableWithAggregatesFilter | ReactionType | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    sessionId?: StringWithAggregatesFilter | string
    contentId?: StringWithAggregatesFilter | string
  }

  export type ContentMetaCreateInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    views?: ViewCreateNestedManyWithoutContentInput
    shares?: ShareCreateNestedManyWithoutContentInput
    reactions?: ReactionCreateNestedManyWithoutContentInput
    createdAt?: Date | string
  }

  export type ContentMetaUncheckedCreateInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    views?: ViewUncheckedCreateNestedManyWithoutContentInput
    shares?: ShareUncheckedCreateNestedManyWithoutContentInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutContentInput
    createdAt?: Date | string
  }

  export type ContentMetaUpdateInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: ViewUpdateManyWithoutContentNestedInput
    shares?: ShareUpdateManyWithoutContentNestedInput
    reactions?: ReactionUpdateManyWithoutContentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentMetaUncheckedUpdateInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: ViewUncheckedUpdateManyWithoutContentNestedInput
    shares?: ShareUncheckedUpdateManyWithoutContentNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutContentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentMetaCreateManyInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    createdAt?: Date | string
  }

  export type ContentMetaUpdateManyMutationInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentMetaUncheckedUpdateManyInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViewCreateInput = {
    id?: string
    createdAt?: Date | string
    sessionId: string
    content: ContentMetaCreateNestedOneWithoutViewsInput
  }

  export type ViewUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    sessionId: string
    contentId: string
  }

  export type ViewUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    content?: ContentMetaUpdateOneRequiredWithoutViewsNestedInput
  }

  export type ViewUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type ViewCreateManyInput = {
    id?: string
    createdAt?: Date | string
    sessionId: string
    contentId: string
  }

  export type ViewUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ViewUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareCreateInput = {
    id?: string
    type?: ShareType | null
    createdAt?: Date | string
    sessionId: string
    content: ContentMetaCreateNestedOneWithoutSharesInput
  }

  export type ShareUncheckedCreateInput = {
    id?: string
    type?: ShareType | null
    createdAt?: Date | string
    sessionId: string
    contentId: string
  }

  export type ShareUpdateInput = {
    type?: NullableEnumShareTypeFieldUpdateOperationsInput | ShareType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    content?: ContentMetaUpdateOneRequiredWithoutSharesNestedInput
  }

  export type ShareUncheckedUpdateInput = {
    type?: NullableEnumShareTypeFieldUpdateOperationsInput | ShareType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareCreateManyInput = {
    id?: string
    type?: ShareType | null
    createdAt?: Date | string
    sessionId: string
    contentId: string
  }

  export type ShareUpdateManyMutationInput = {
    type?: NullableEnumShareTypeFieldUpdateOperationsInput | ShareType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareUncheckedUpdateManyInput = {
    type?: NullableEnumShareTypeFieldUpdateOperationsInput | ShareType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionCreateInput = {
    id?: string
    count?: number | null
    section?: string | null
    type?: ReactionType | null
    createdAt?: Date | string
    sessionId: string
    content: ContentMetaCreateNestedOneWithoutReactionsInput
  }

  export type ReactionUncheckedCreateInput = {
    id?: string
    count?: number | null
    section?: string | null
    type?: ReactionType | null
    createdAt?: Date | string
    sessionId: string
    contentId: string
  }

  export type ReactionUpdateInput = {
    count?: NullableIntFieldUpdateOperationsInput | number | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumReactionTypeFieldUpdateOperationsInput | ReactionType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    content?: ContentMetaUpdateOneRequiredWithoutReactionsNestedInput
  }

  export type ReactionUncheckedUpdateInput = {
    count?: NullableIntFieldUpdateOperationsInput | number | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumReactionTypeFieldUpdateOperationsInput | ReactionType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionCreateManyInput = {
    id?: string
    count?: number | null
    section?: string | null
    type?: ReactionType | null
    createdAt?: Date | string
    sessionId: string
    contentId: string
  }

  export type ReactionUpdateManyMutationInput = {
    count?: NullableIntFieldUpdateOperationsInput | number | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumReactionTypeFieldUpdateOperationsInput | ReactionType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionUncheckedUpdateManyInput = {
    count?: NullableIntFieldUpdateOperationsInput | number | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumReactionTypeFieldUpdateOperationsInput | ReactionType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumContentTypeFilter = {
    equals?: ContentType
    in?: Enumerable<ContentType>
    notIn?: Enumerable<ContentType>
    not?: NestedEnumContentTypeFilter | ContentType
  }

  export type ViewListRelationFilter = {
    every?: ViewWhereInput
    some?: ViewWhereInput
    none?: ViewWhereInput
  }

  export type ShareListRelationFilter = {
    every?: ShareWhereInput
    some?: ShareWhereInput
    none?: ShareWhereInput
  }

  export type ReactionListRelationFilter = {
    every?: ReactionWhereInput
    some?: ReactionWhereInput
    none?: ReactionWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type ViewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContentMetaCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type ContentMetaMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type ContentMetaMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumContentTypeWithAggregatesFilter = {
    equals?: ContentType
    in?: Enumerable<ContentType>
    notIn?: Enumerable<ContentType>
    not?: NestedEnumContentTypeWithAggregatesFilter | ContentType
    _count?: NestedIntFilter
    _min?: NestedEnumContentTypeFilter
    _max?: NestedEnumContentTypeFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ContentMetaRelationFilter = {
    is?: ContentMetaWhereInput
    isNot?: ContentMetaWhereInput
  }

  export type ViewCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type ViewMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type ViewMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type EnumShareTypeNullableFilter = {
    equals?: ShareType | null
    in?: Enumerable<ShareType> | null
    notIn?: Enumerable<ShareType> | null
    not?: NestedEnumShareTypeNullableFilter | ShareType | null
    isSet?: boolean
  }

  export type ShareCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type ShareMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type ShareMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type EnumShareTypeNullableWithAggregatesFilter = {
    equals?: ShareType | null
    in?: Enumerable<ShareType> | null
    notIn?: Enumerable<ShareType> | null
    not?: NestedEnumShareTypeNullableWithAggregatesFilter | ShareType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumShareTypeNullableFilter
    _max?: NestedEnumShareTypeNullableFilter
    isSet?: boolean
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type EnumReactionTypeNullableFilter = {
    equals?: ReactionType | null
    in?: Enumerable<ReactionType> | null
    notIn?: Enumerable<ReactionType> | null
    not?: NestedEnumReactionTypeNullableFilter | ReactionType | null
    isSet?: boolean
  }

  export type ReactionCountOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    section?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type ReactionAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type ReactionMaxOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    section?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type ReactionMinOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    section?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    sessionId?: SortOrder
    contentId?: SortOrder
  }

  export type ReactionSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    isSet?: boolean
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type EnumReactionTypeNullableWithAggregatesFilter = {
    equals?: ReactionType | null
    in?: Enumerable<ReactionType> | null
    notIn?: Enumerable<ReactionType> | null
    not?: NestedEnumReactionTypeNullableWithAggregatesFilter | ReactionType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumReactionTypeNullableFilter
    _max?: NestedEnumReactionTypeNullableFilter
    isSet?: boolean
  }

  export type ViewCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<ViewCreateWithoutContentInput>, Enumerable<ViewUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ViewCreateOrConnectWithoutContentInput>
    createMany?: ViewCreateManyContentInputEnvelope
    connect?: Enumerable<ViewWhereUniqueInput>
  }

  export type ShareCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<ShareCreateWithoutContentInput>, Enumerable<ShareUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutContentInput>
    createMany?: ShareCreateManyContentInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type ReactionCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<ReactionCreateWithoutContentInput>, Enumerable<ReactionUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ReactionCreateOrConnectWithoutContentInput>
    createMany?: ReactionCreateManyContentInputEnvelope
    connect?: Enumerable<ReactionWhereUniqueInput>
  }

  export type ViewUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<ViewCreateWithoutContentInput>, Enumerable<ViewUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ViewCreateOrConnectWithoutContentInput>
    createMany?: ViewCreateManyContentInputEnvelope
    connect?: Enumerable<ViewWhereUniqueInput>
  }

  export type ShareUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<ShareCreateWithoutContentInput>, Enumerable<ShareUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutContentInput>
    createMany?: ShareCreateManyContentInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type ReactionUncheckedCreateNestedManyWithoutContentInput = {
    create?: XOR<Enumerable<ReactionCreateWithoutContentInput>, Enumerable<ReactionUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ReactionCreateOrConnectWithoutContentInput>
    createMany?: ReactionCreateManyContentInputEnvelope
    connect?: Enumerable<ReactionWhereUniqueInput>
  }

  export type EnumContentTypeFieldUpdateOperationsInput = {
    set?: ContentType
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ViewUpdateManyWithoutContentNestedInput = {
    create?: XOR<Enumerable<ViewCreateWithoutContentInput>, Enumerable<ViewUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ViewCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<ViewUpsertWithWhereUniqueWithoutContentInput>
    createMany?: ViewCreateManyContentInputEnvelope
    set?: Enumerable<ViewWhereUniqueInput>
    disconnect?: Enumerable<ViewWhereUniqueInput>
    delete?: Enumerable<ViewWhereUniqueInput>
    connect?: Enumerable<ViewWhereUniqueInput>
    update?: Enumerable<ViewUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<ViewUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<ViewScalarWhereInput>
  }

  export type ShareUpdateManyWithoutContentNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutContentInput>, Enumerable<ShareUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutContentInput>
    createMany?: ShareCreateManyContentInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type ReactionUpdateManyWithoutContentNestedInput = {
    create?: XOR<Enumerable<ReactionCreateWithoutContentInput>, Enumerable<ReactionUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ReactionCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<ReactionUpsertWithWhereUniqueWithoutContentInput>
    createMany?: ReactionCreateManyContentInputEnvelope
    set?: Enumerable<ReactionWhereUniqueInput>
    disconnect?: Enumerable<ReactionWhereUniqueInput>
    delete?: Enumerable<ReactionWhereUniqueInput>
    connect?: Enumerable<ReactionWhereUniqueInput>
    update?: Enumerable<ReactionUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<ReactionUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<ReactionScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ViewUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<Enumerable<ViewCreateWithoutContentInput>, Enumerable<ViewUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ViewCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<ViewUpsertWithWhereUniqueWithoutContentInput>
    createMany?: ViewCreateManyContentInputEnvelope
    set?: Enumerable<ViewWhereUniqueInput>
    disconnect?: Enumerable<ViewWhereUniqueInput>
    delete?: Enumerable<ViewWhereUniqueInput>
    connect?: Enumerable<ViewWhereUniqueInput>
    update?: Enumerable<ViewUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<ViewUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<ViewScalarWhereInput>
  }

  export type ShareUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutContentInput>, Enumerable<ShareUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutContentInput>
    createMany?: ShareCreateManyContentInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type ReactionUncheckedUpdateManyWithoutContentNestedInput = {
    create?: XOR<Enumerable<ReactionCreateWithoutContentInput>, Enumerable<ReactionUncheckedCreateWithoutContentInput>>
    connectOrCreate?: Enumerable<ReactionCreateOrConnectWithoutContentInput>
    upsert?: Enumerable<ReactionUpsertWithWhereUniqueWithoutContentInput>
    createMany?: ReactionCreateManyContentInputEnvelope
    set?: Enumerable<ReactionWhereUniqueInput>
    disconnect?: Enumerable<ReactionWhereUniqueInput>
    delete?: Enumerable<ReactionWhereUniqueInput>
    connect?: Enumerable<ReactionWhereUniqueInput>
    update?: Enumerable<ReactionUpdateWithWhereUniqueWithoutContentInput>
    updateMany?: Enumerable<ReactionUpdateManyWithWhereWithoutContentInput>
    deleteMany?: Enumerable<ReactionScalarWhereInput>
  }

  export type ContentMetaCreateNestedOneWithoutViewsInput = {
    create?: XOR<ContentMetaCreateWithoutViewsInput, ContentMetaUncheckedCreateWithoutViewsInput>
    connectOrCreate?: ContentMetaCreateOrConnectWithoutViewsInput
    connect?: ContentMetaWhereUniqueInput
  }

  export type ContentMetaUpdateOneRequiredWithoutViewsNestedInput = {
    create?: XOR<ContentMetaCreateWithoutViewsInput, ContentMetaUncheckedCreateWithoutViewsInput>
    connectOrCreate?: ContentMetaCreateOrConnectWithoutViewsInput
    upsert?: ContentMetaUpsertWithoutViewsInput
    connect?: ContentMetaWhereUniqueInput
    update?: XOR<ContentMetaUpdateWithoutViewsInput, ContentMetaUncheckedUpdateWithoutViewsInput>
  }

  export type ContentMetaCreateNestedOneWithoutSharesInput = {
    create?: XOR<ContentMetaCreateWithoutSharesInput, ContentMetaUncheckedCreateWithoutSharesInput>
    connectOrCreate?: ContentMetaCreateOrConnectWithoutSharesInput
    connect?: ContentMetaWhereUniqueInput
  }

  export type NullableEnumShareTypeFieldUpdateOperationsInput = {
    set?: ShareType | null
    unset?: boolean
  }

  export type ContentMetaUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<ContentMetaCreateWithoutSharesInput, ContentMetaUncheckedCreateWithoutSharesInput>
    connectOrCreate?: ContentMetaCreateOrConnectWithoutSharesInput
    upsert?: ContentMetaUpsertWithoutSharesInput
    connect?: ContentMetaWhereUniqueInput
    update?: XOR<ContentMetaUpdateWithoutSharesInput, ContentMetaUncheckedUpdateWithoutSharesInput>
  }

  export type ContentMetaCreateNestedOneWithoutReactionsInput = {
    create?: XOR<ContentMetaCreateWithoutReactionsInput, ContentMetaUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: ContentMetaCreateOrConnectWithoutReactionsInput
    connect?: ContentMetaWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type NullableEnumReactionTypeFieldUpdateOperationsInput = {
    set?: ReactionType | null
    unset?: boolean
  }

  export type ContentMetaUpdateOneRequiredWithoutReactionsNestedInput = {
    create?: XOR<ContentMetaCreateWithoutReactionsInput, ContentMetaUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: ContentMetaCreateOrConnectWithoutReactionsInput
    upsert?: ContentMetaUpsertWithoutReactionsInput
    connect?: ContentMetaWhereUniqueInput
    update?: XOR<ContentMetaUpdateWithoutReactionsInput, ContentMetaUncheckedUpdateWithoutReactionsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumContentTypeFilter = {
    equals?: ContentType
    in?: Enumerable<ContentType>
    notIn?: Enumerable<ContentType>
    not?: NestedEnumContentTypeFilter | ContentType
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumContentTypeWithAggregatesFilter = {
    equals?: ContentType
    in?: Enumerable<ContentType>
    notIn?: Enumerable<ContentType>
    not?: NestedEnumContentTypeWithAggregatesFilter | ContentType
    _count?: NestedIntFilter
    _min?: NestedEnumContentTypeFilter
    _max?: NestedEnumContentTypeFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumShareTypeNullableFilter = {
    equals?: ShareType | null
    in?: Enumerable<ShareType> | null
    notIn?: Enumerable<ShareType> | null
    not?: NestedEnumShareTypeNullableFilter | ShareType | null
    isSet?: boolean
  }

  export type NestedEnumShareTypeNullableWithAggregatesFilter = {
    equals?: ShareType | null
    in?: Enumerable<ShareType> | null
    notIn?: Enumerable<ShareType> | null
    not?: NestedEnumShareTypeNullableWithAggregatesFilter | ShareType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumShareTypeNullableFilter
    _max?: NestedEnumShareTypeNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type NestedEnumReactionTypeNullableFilter = {
    equals?: ReactionType | null
    in?: Enumerable<ReactionType> | null
    notIn?: Enumerable<ReactionType> | null
    not?: NestedEnumReactionTypeNullableFilter | ReactionType | null
    isSet?: boolean
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    isSet?: boolean
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
    isSet?: boolean
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type NestedEnumReactionTypeNullableWithAggregatesFilter = {
    equals?: ReactionType | null
    in?: Enumerable<ReactionType> | null
    notIn?: Enumerable<ReactionType> | null
    not?: NestedEnumReactionTypeNullableWithAggregatesFilter | ReactionType | null
    _count?: NestedIntNullableFilter
    _min?: NestedEnumReactionTypeNullableFilter
    _max?: NestedEnumReactionTypeNullableFilter
    isSet?: boolean
  }

  export type ViewCreateWithoutContentInput = {
    id?: string
    createdAt?: Date | string
    sessionId: string
  }

  export type ViewUncheckedCreateWithoutContentInput = {
    id?: string
    createdAt?: Date | string
    sessionId: string
  }

  export type ViewCreateOrConnectWithoutContentInput = {
    where: ViewWhereUniqueInput
    create: XOR<ViewCreateWithoutContentInput, ViewUncheckedCreateWithoutContentInput>
  }

  export type ViewCreateManyContentInputEnvelope = {
    data: Enumerable<ViewCreateManyContentInput>
  }

  export type ShareCreateWithoutContentInput = {
    id?: string
    type?: ShareType | null
    createdAt?: Date | string
    sessionId: string
  }

  export type ShareUncheckedCreateWithoutContentInput = {
    id?: string
    type?: ShareType | null
    createdAt?: Date | string
    sessionId: string
  }

  export type ShareCreateOrConnectWithoutContentInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutContentInput, ShareUncheckedCreateWithoutContentInput>
  }

  export type ShareCreateManyContentInputEnvelope = {
    data: Enumerable<ShareCreateManyContentInput>
  }

  export type ReactionCreateWithoutContentInput = {
    id?: string
    count?: number | null
    section?: string | null
    type?: ReactionType | null
    createdAt?: Date | string
    sessionId: string
  }

  export type ReactionUncheckedCreateWithoutContentInput = {
    id?: string
    count?: number | null
    section?: string | null
    type?: ReactionType | null
    createdAt?: Date | string
    sessionId: string
  }

  export type ReactionCreateOrConnectWithoutContentInput = {
    where: ReactionWhereUniqueInput
    create: XOR<ReactionCreateWithoutContentInput, ReactionUncheckedCreateWithoutContentInput>
  }

  export type ReactionCreateManyContentInputEnvelope = {
    data: Enumerable<ReactionCreateManyContentInput>
  }

  export type ViewUpsertWithWhereUniqueWithoutContentInput = {
    where: ViewWhereUniqueInput
    update: XOR<ViewUpdateWithoutContentInput, ViewUncheckedUpdateWithoutContentInput>
    create: XOR<ViewCreateWithoutContentInput, ViewUncheckedCreateWithoutContentInput>
  }

  export type ViewUpdateWithWhereUniqueWithoutContentInput = {
    where: ViewWhereUniqueInput
    data: XOR<ViewUpdateWithoutContentInput, ViewUncheckedUpdateWithoutContentInput>
  }

  export type ViewUpdateManyWithWhereWithoutContentInput = {
    where: ViewScalarWhereInput
    data: XOR<ViewUpdateManyMutationInput, ViewUncheckedUpdateManyWithoutViewsInput>
  }

  export type ViewScalarWhereInput = {
    AND?: Enumerable<ViewScalarWhereInput>
    OR?: Enumerable<ViewScalarWhereInput>
    NOT?: Enumerable<ViewScalarWhereInput>
    id?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    sessionId?: StringFilter | string
    contentId?: StringFilter | string
  }

  export type ShareUpsertWithWhereUniqueWithoutContentInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutContentInput, ShareUncheckedUpdateWithoutContentInput>
    create: XOR<ShareCreateWithoutContentInput, ShareUncheckedCreateWithoutContentInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutContentInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutContentInput, ShareUncheckedUpdateWithoutContentInput>
  }

  export type ShareUpdateManyWithWhereWithoutContentInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutSharesInput>
  }

  export type ShareScalarWhereInput = {
    AND?: Enumerable<ShareScalarWhereInput>
    OR?: Enumerable<ShareScalarWhereInput>
    NOT?: Enumerable<ShareScalarWhereInput>
    id?: StringFilter | string
    type?: EnumShareTypeNullableFilter | ShareType | null
    createdAt?: DateTimeFilter | Date | string
    sessionId?: StringFilter | string
    contentId?: StringFilter | string
  }

  export type ReactionUpsertWithWhereUniqueWithoutContentInput = {
    where: ReactionWhereUniqueInput
    update: XOR<ReactionUpdateWithoutContentInput, ReactionUncheckedUpdateWithoutContentInput>
    create: XOR<ReactionCreateWithoutContentInput, ReactionUncheckedCreateWithoutContentInput>
  }

  export type ReactionUpdateWithWhereUniqueWithoutContentInput = {
    where: ReactionWhereUniqueInput
    data: XOR<ReactionUpdateWithoutContentInput, ReactionUncheckedUpdateWithoutContentInput>
  }

  export type ReactionUpdateManyWithWhereWithoutContentInput = {
    where: ReactionScalarWhereInput
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyWithoutReactionsInput>
  }

  export type ReactionScalarWhereInput = {
    AND?: Enumerable<ReactionScalarWhereInput>
    OR?: Enumerable<ReactionScalarWhereInput>
    NOT?: Enumerable<ReactionScalarWhereInput>
    id?: StringFilter | string
    count?: IntNullableFilter | number | null
    section?: StringNullableFilter | string | null
    type?: EnumReactionTypeNullableFilter | ReactionType | null
    createdAt?: DateTimeFilter | Date | string
    sessionId?: StringFilter | string
    contentId?: StringFilter | string
  }

  export type ContentMetaCreateWithoutViewsInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    shares?: ShareCreateNestedManyWithoutContentInput
    reactions?: ReactionCreateNestedManyWithoutContentInput
    createdAt?: Date | string
  }

  export type ContentMetaUncheckedCreateWithoutViewsInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    shares?: ShareUncheckedCreateNestedManyWithoutContentInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutContentInput
    createdAt?: Date | string
  }

  export type ContentMetaCreateOrConnectWithoutViewsInput = {
    where: ContentMetaWhereUniqueInput
    create: XOR<ContentMetaCreateWithoutViewsInput, ContentMetaUncheckedCreateWithoutViewsInput>
  }

  export type ContentMetaUpsertWithoutViewsInput = {
    update: XOR<ContentMetaUpdateWithoutViewsInput, ContentMetaUncheckedUpdateWithoutViewsInput>
    create: XOR<ContentMetaCreateWithoutViewsInput, ContentMetaUncheckedCreateWithoutViewsInput>
  }

  export type ContentMetaUpdateWithoutViewsInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    shares?: ShareUpdateManyWithoutContentNestedInput
    reactions?: ReactionUpdateManyWithoutContentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentMetaUncheckedUpdateWithoutViewsInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    shares?: ShareUncheckedUpdateManyWithoutContentNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutContentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentMetaCreateWithoutSharesInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    views?: ViewCreateNestedManyWithoutContentInput
    reactions?: ReactionCreateNestedManyWithoutContentInput
    createdAt?: Date | string
  }

  export type ContentMetaUncheckedCreateWithoutSharesInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    views?: ViewUncheckedCreateNestedManyWithoutContentInput
    reactions?: ReactionUncheckedCreateNestedManyWithoutContentInput
    createdAt?: Date | string
  }

  export type ContentMetaCreateOrConnectWithoutSharesInput = {
    where: ContentMetaWhereUniqueInput
    create: XOR<ContentMetaCreateWithoutSharesInput, ContentMetaUncheckedCreateWithoutSharesInput>
  }

  export type ContentMetaUpsertWithoutSharesInput = {
    update: XOR<ContentMetaUpdateWithoutSharesInput, ContentMetaUncheckedUpdateWithoutSharesInput>
    create: XOR<ContentMetaCreateWithoutSharesInput, ContentMetaUncheckedCreateWithoutSharesInput>
  }

  export type ContentMetaUpdateWithoutSharesInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: ViewUpdateManyWithoutContentNestedInput
    reactions?: ReactionUpdateManyWithoutContentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentMetaUncheckedUpdateWithoutSharesInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: ViewUncheckedUpdateManyWithoutContentNestedInput
    reactions?: ReactionUncheckedUpdateManyWithoutContentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentMetaCreateWithoutReactionsInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    views?: ViewCreateNestedManyWithoutContentInput
    shares?: ShareCreateNestedManyWithoutContentInput
    createdAt?: Date | string
  }

  export type ContentMetaUncheckedCreateWithoutReactionsInput = {
    id?: string
    type: ContentType
    title: string
    slug: string
    views?: ViewUncheckedCreateNestedManyWithoutContentInput
    shares?: ShareUncheckedCreateNestedManyWithoutContentInput
    createdAt?: Date | string
  }

  export type ContentMetaCreateOrConnectWithoutReactionsInput = {
    where: ContentMetaWhereUniqueInput
    create: XOR<ContentMetaCreateWithoutReactionsInput, ContentMetaUncheckedCreateWithoutReactionsInput>
  }

  export type ContentMetaUpsertWithoutReactionsInput = {
    update: XOR<ContentMetaUpdateWithoutReactionsInput, ContentMetaUncheckedUpdateWithoutReactionsInput>
    create: XOR<ContentMetaCreateWithoutReactionsInput, ContentMetaUncheckedCreateWithoutReactionsInput>
  }

  export type ContentMetaUpdateWithoutReactionsInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: ViewUpdateManyWithoutContentNestedInput
    shares?: ShareUpdateManyWithoutContentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContentMetaUncheckedUpdateWithoutReactionsInput = {
    type?: EnumContentTypeFieldUpdateOperationsInput | ContentType
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    views?: ViewUncheckedUpdateManyWithoutContentNestedInput
    shares?: ShareUncheckedUpdateManyWithoutContentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViewCreateManyContentInput = {
    id?: string
    createdAt?: Date | string
    sessionId: string
  }

  export type ShareCreateManyContentInput = {
    id?: string
    type?: ShareType | null
    createdAt?: Date | string
    sessionId: string
  }

  export type ReactionCreateManyContentInput = {
    id?: string
    count?: number | null
    section?: string | null
    type?: ReactionType | null
    createdAt?: Date | string
    sessionId: string
  }

  export type ViewUpdateWithoutContentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ViewUncheckedUpdateWithoutContentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ViewUncheckedUpdateManyWithoutViewsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareUpdateWithoutContentInput = {
    type?: NullableEnumShareTypeFieldUpdateOperationsInput | ShareType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareUncheckedUpdateWithoutContentInput = {
    type?: NullableEnumShareTypeFieldUpdateOperationsInput | ShareType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareUncheckedUpdateManyWithoutSharesInput = {
    type?: NullableEnumShareTypeFieldUpdateOperationsInput | ShareType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionUpdateWithoutContentInput = {
    count?: NullableIntFieldUpdateOperationsInput | number | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumReactionTypeFieldUpdateOperationsInput | ReactionType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionUncheckedUpdateWithoutContentInput = {
    count?: NullableIntFieldUpdateOperationsInput | number | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumReactionTypeFieldUpdateOperationsInput | ReactionType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }

  export type ReactionUncheckedUpdateManyWithoutReactionsInput = {
    count?: NullableIntFieldUpdateOperationsInput | number | null
    section?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumReactionTypeFieldUpdateOperationsInput | ReactionType | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}