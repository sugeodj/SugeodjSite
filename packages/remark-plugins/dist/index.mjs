// src/index.ts
import remarkFrontMatter from "remark-frontmatter";
import remarkGfm from "remark-gfm";

// src/withFrontMatter.ts
import { z } from "zod";

// src/utils.ts
import { Parser } from "acorn";
import acornJsx from "acorn-jsx";
import fm from "front-matter";
import slug from "slug";
var ParserWithJSX = Parser.extend(acornJsx());
var parse = (content) => ParserWithJSX.parse(content, {
  ecmaVersion: 2020,
  sourceType: "module"
});
var getFrontMatter = (content) => fm(content).attributes;
var addImport = (tree, name, location) => {
  tree.children.unshift({
    type: "mdxjsEsm",
    data: {
      estree: parse(`import ${name} from '${location}'`)
    }
  });
};
var addContent = (tree, content) => {
  tree.children.push({
    type: "mdxjsEsm",
    data: {
      estree: parse(content)
    }
  });
};
var getTableOfContents = (tree) => {
  const contents = [];
  for (let nodeIndex = 0; nodeIndex < tree.children.length; nodeIndex++) {
    const node = tree.children[nodeIndex];
    if (node.type === "heading" && [2, 3].includes(node.depth)) {
      const depth = node.depth - 1;
      const title = node.children.filter((n) => n.type === "text").map((n) => n.value).join("");
      contents.push({
        title,
        slug: slug(title),
        depth
      });
    }
  }
  return contents;
};

// src/withFrontMatter.ts
var dateRegex = /^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/;
var BaseFrontMatter = z.object({
  title: z.string().max(110),
  description: z.string().max(120),
  caption: z.string().default(""),
  layout: z.string().default("Post")
});
var PostFrontMatter = z.object({
  date: z.string().regex(dateRegex, "Date format MUST be YYYY-MM-DD"),
  lang: z.enum(["id", "en"]),
  tags: z.array(z.string()).min(2).max(5),
  category: z.string()
});
var ProjectFrontMatter = z.object({
  githubUrl: z.string().url().optional(),
  npmUrl: z.string().url().optional(),
  type: z.enum(["package"]).default("package")
});
var validate = (schema, data) => {
  try {
    return schema.parse(data);
  } catch (err) {
    if (err instanceof z.ZodError) {
      throw new Error(JSON.stringify(err.issues, null, 2));
    }
    return null;
  }
};
var withFrontMatter = () => (_tree, file) => {
  const data = getFrontMatter(file.value);
  if (Object.keys(data).length === 0)
    return;
  const base = validate(BaseFrontMatter, data);
  let frontMatter;
  switch (base.layout) {
    case "Post": {
      const post = validate(PostFrontMatter, data);
      frontMatter = { ...base, ...post };
      break;
    }
    case "Project": {
      const project = validate(ProjectFrontMatter, data);
      frontMatter = { ...base, ...project };
      break;
    }
    default: {
      frontMatter = base;
      break;
    }
  }
  file.data["front-matter"] = frontMatter;
};
var withFrontMatter_default = withFrontMatter;

// src/withLayout.ts
var withLayout = () => (tree, file) => {
  const data = file.data["front-matter"] || {};
  if (Object.keys(data).length === 0)
    return;
  const { layout, ...frontMatter } = file.data["front-matter"];
  const tableOfContents = getTableOfContents(tree);
  addImport(tree, layout, `@/contents-layouts/${layout}`);
  addContent(
    tree,
    `export default ({ children }) => (
      <${layout}
        frontMatter={${JSON.stringify(frontMatter)}}
        tableOfContents={${JSON.stringify(tableOfContents)}}
      >
        {children}
      </${layout}>
     )`
  );
};
var withLayout_default = withLayout;

// src/withStrict.ts
var withStrict = () => (tree) => {
  for (let nodeIndex = 0; nodeIndex < tree.children.length; nodeIndex++) {
    const node = tree.children[nodeIndex];
    if (node.type === "heading" && ![2, 3].includes(node.depth) || node.type === "mdxJsxFlowElement" && ["h1", "h4", "h5", "h6"].includes(node.name)) {
      throw new Error("Headings depths other than 2 or 3 are not allowed.");
    }
  }
};
var withStrict_default = withStrict;

// src/index.ts
var plugins = [
  remarkFrontMatter,
  remarkGfm,
  withFrontMatter_default,
  withStrict_default,
  withLayout_default
];
var src_default = plugins;
export {
  src_default as default
};
//# sourceMappingURL=data:application/json;base64,